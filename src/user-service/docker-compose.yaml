version: "3.8"
services:
  api:
    build:
      dockerfile: Dockerfile
      context: .
    depends_on:
      - postgres
    environment:
      - PORT=${PORT}
      - MODE=${MODE}
      - JWT_TOKEN_SECRET=${JWT_TOKEN_SECRET}
      - JWT_TOKEN_DURATION=${JWT_TOKEN_DURATION}
      - JWT_REFRESH_TOKEN_SECRET=${JWT_REFRESH_TOKEN_SECRET}
      - JWT_REFRESH_TOKEN_DURATION=${JWT_REFRESH_TOKEN_DURATION}
      - JWT_EMAIL_CONFIRMATION_TOKEN_SECRET=${JWT_EMAIL_CONFIRMATION_TOKEN_SECRET}
      - JWT_EMAIL_CONFIRMATION_TOKEN_DURATION=${JWT_EMAIL_CONFIRMATION_TOKEN_DURATION}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    command: [ "./scripts/wait-for-postgres.sh", "./scripts/docker-entrypoint.sh" ]
    restart: "always"
    ports:
      - "8081:8081"
    networks:
      - user-network
      - default
    volumes:
      - .:/src/app
      - /src/app/node_modules

  postgres:
    image: postgres:14.4
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    expose:
      - "5433" # Publishes 5433 to other containers but NOT to host machine
    ports:
      - "5433:5433"
    healthcheck:
      test: echo "SELECT 1" | psql -q -p 5433 -U tinyurl-users > /dev/null
      interval: 10s
      timeout: 1s
      retries: 3
    networks:
      - user-network
      - default
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    command: -p 5433

networks:
  default:
    external:
      name: rabbitmq_network
  user-network:
volumes:
  pgdata: